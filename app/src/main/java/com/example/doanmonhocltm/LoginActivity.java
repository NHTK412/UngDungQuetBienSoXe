package com.example.doanmonhocltm;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ProgressBar;
import android.widget.Toast;

import androidx.activity.EdgeToEdge;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.app.NotificationManagerCompat;
import androidx.core.content.ContextCompat;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

import com.example.doanmonhocltm.callapi.ApiClient;
import com.example.doanmonhocltm.callapi.ApiService;
import com.example.doanmonhocltm.callapi.SessionManager;
import com.example.doanmonhocltm.model.FcmToken;
import com.example.doanmonhocltm.model.LoginHistory;
import com.example.doanmonhocltm.model.LoginRequest;
import com.example.doanmonhocltm.model.Person;
import com.example.doanmonhocltm.model.ResultLogin;
import com.example.doanmonhocltm.model.User;
import com.example.doanmonhocltm.service.LocationService;
import com.example.doanmonhocltm.util.DeviceUtil;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputEditText;

import java.io.IOException;

import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import com.google.firebase.messaging.FirebaseMessaging;

public class LoginActivity extends AppCompatActivity {
    private static final String TAG = "LoginActivity";
    private TextInputEditText edtUsername;
    private TextInputEditText edtPassword;
    private MaterialButton btnLogin;
    private ProgressBar progressBar;
    private ApiService apiService;
    private SessionManager sessionManager;

    private static final int REQUEST_LOCATION_PERMISSIONS = 100;

    // Permission launcher for notification permission
    private ActivityResultLauncher<String> requestPermissionLauncher = registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -> {
        if (isGranted) {
            Log.d(TAG, "‚úÖ Notification permission granted");
            // Permission granted, continue with app flow
        } else {
            Log.d(TAG, "‚ùå Notification permission denied");
            showPermissionDeniedDialog();
        }
    });

    @SuppressLint("MissingInflatedId")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_login);

        Log.d(TAG, "üöÄ LoginActivity onCreate() ƒë∆∞·ª£c g·ªçi");

        setupWindowInsets();
        initializeViews();
        initializeServices();
        setupEventListeners();

        // Check notification permission when app starts
        checkNotificationPermission();
    }

    private void checkNotificationPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.POST_NOTIFICATIONS) != PackageManager.PERMISSION_GRANTED) {
                // Show rationale dialog before requesting permission
                showPermissionRationaleDialog();
            }
        } else {
            // For older versions, check if notifications are enabled
            if (!NotificationManagerCompat.from(this).areNotificationsEnabled()) {
                showNotificationSettingsDialog();
            }
        }
    }

    private void showPermissionRationaleDialog() {
        new AlertDialog.Builder(this)
                .setTitle("C·∫•p quy·ªÅn th√¥ng b√°o")
                .setMessage("·ª®ng d·ª•ng c·∫ßn quy·ªÅn th√¥ng b√°o ƒë·ªÉ g·ª≠i c√°c th√¥ng tin quan tr·ªçng ƒë·∫øn b·∫°n. B·∫°n c√≥ mu·ªën c·∫•p quy·ªÅn kh√¥ng?")
                .setPositiveButton("ƒê·ªìng √Ω", (dialog, which) -> {
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                        requestPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS);
                    }
                })
                .setNegativeButton("T·ª´ ch·ªëi", (dialog, which) -> {
                    showPermissionDeniedDialog();
                })
                .setCancelable(false)
                .show();
    }

    private void showPermissionDeniedDialog() {
        new AlertDialog.Builder(this)
                .setTitle("Quy·ªÅn th√¥ng b√°o b·ªã t·ª´ ch·ªëi")
                .setMessage("·ª®ng d·ª•ng kh√¥ng th·ªÉ ho·∫°t ƒë·ªông m√† kh√¥ng c√≥ quy·ªÅn th√¥ng b√°o. ·ª®ng d·ª•ng s·∫Ω ƒë∆∞·ª£c ƒë√≥ng.")
                .setPositiveButton("Tho√°t ·ª©ng d·ª•ng", (dialog, which) -> {
                    finish();
                    System.exit(0);
                })
                .setNegativeButton("Th·ª≠ l·∫°i", (dialog, which) -> {
                    checkNotificationPermission();
                })
                .setCancelable(false)
                .show();
    }

    private void showNotificationSettingsDialog() {
        new AlertDialog.Builder(this)
                .setTitle("Th√¥ng b√°o b·ªã t·∫Øt")
                .setMessage("Vui l√≤ng b·∫≠t th√¥ng b√°o trong c√†i ƒë·∫∑t ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng ·ª©ng d·ª•ng.")
                .setPositiveButton("M·ªü c√†i ƒë·∫∑t", (dialog, which) -> {
                    Intent intent = new Intent();
                    intent.setAction("android.settings.APP_NOTIFICATION_SETTINGS");
                    intent.putExtra("android.provider.extra.APP_PACKAGE", getPackageName());
                    startActivity(intent);
                })
                .setNegativeButton("Tho√°t ·ª©ng d·ª•ng", (dialog, which) -> {
                    finish();
                    System.exit(0);
                })
                .setCancelable(false)
                .show();
    }

    @Override
    protected void onResume() {
        super.onResume();
        // Check notification permission again when returning to the activity
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.TIRAMISU) {
            if (!NotificationManagerCompat.from(this).areNotificationsEnabled()) {
                showNotificationSettingsDialog();
            }
        }
    }

    private void setupWindowInsets() {
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });
    }

    private void initializeServices() {
        this.apiService = ApiClient.getClient(LoginActivity.this).create(ApiService.class);
        this.sessionManager = new SessionManager(LoginActivity.this);
        Log.d(TAG, "‚úÖ Services initialized");
    }

    private void initializeViews() {
        this.edtUsername = findViewById(R.id.edtUsername);
        this.edtPassword = findViewById(R.id.edtPassword);
        this.btnLogin = findViewById(R.id.btnLogin);
        this.progressBar = findViewById(R.id.progressBar);
//        Log.d(TAG, "‚úÖ Views initialized");
    }

    private void setupEventListeners() {
        btnLogin.setOnClickListener(v -> {
            // Check notification permission before login
            if (hasNotificationPermission()) {
                handleLoginButtonClick();
            } else {
                checkNotificationPermission();
            }
        });
    }

    private boolean hasNotificationPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            return ContextCompat.checkSelfPermission(this, Manifest.permission.POST_NOTIFICATIONS) == PackageManager.PERMISSION_GRANTED;
        } else {
            return NotificationManagerCompat.from(this).areNotificationsEnabled();
        }
    }

    private void handleLoginButtonClick() {
        String username = edtUsername.getText().toString().trim();
        String password = edtPassword.getText().toString().trim();

        Log.d(TAG, "üîê ƒêang th·ª≠ ƒëƒÉng nh·∫≠p v·ªõi username: " + username);

        if (!validateLoginInput(username, password)) {
            return;
        }

        showLoading(true);
        performLogin(username, password);
    }

    private boolean validateLoginInput(String username, String password) {
        if (username.isEmpty() || password.isEmpty()) {
            Toast.makeText(LoginActivity.this, "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒëƒÉng nh·∫≠p", Toast.LENGTH_SHORT).show();
            return false;
        }
        return true;
    }

    private void performLogin(String username, String password) {
        LoginRequest loginRequest = new LoginRequest(username, password);
        Call<ResultLogin> resultLogin = apiService.login(loginRequest);

        resultLogin.enqueue(new Callback<ResultLogin>() {
            @Override
            public void onResponse(Call<ResultLogin> call, Response<ResultLogin> response) {
                if (response.isSuccessful() && response.body() != null) {
                    Log.d(TAG, "‚úÖ ƒêƒÉng nh·∫≠p API th√†nh c√¥ng");
                    handleSuccessfulLogin(response.body());
                } else {
                    Log.e(TAG, "‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i - Response code: " + response.code());
                    handleFailedLogin(response.code());
                }
            }

            @Override
            public void onFailure(Call<ResultLogin> call, Throwable t) {
                Log.e(TAG, "‚ùå Login API failure: " + t.getMessage());
                handleServerError();
            }
        });
    }

    private void handleSuccessfulLogin(ResultLogin result) {
        String token = result.getToken();
        String username = result.getUsername();
        String userId = result.getId();

        Log.d(TAG, "üìÑ Login result - UserID: " + userId + ", Username: " + username);

        sessionManager.saveToken(token);
        fetchUserDetails(userId, token, username);
    }

    private void fetchUserDetails(String userId, String token, String username) {
        Call<Person> resultFaceRecognition = apiService.getPersonById(userId);

        resultFaceRecognition.enqueue(new Callback<Person>() {
            @Override
            public void onResponse(Call<Person> call, Response<Person> response) {
                if (response.isSuccessful() && response.body() != null) {
                    String fullName = response.body().getFullName();
                    if (fullName != null) {
                        Log.d(TAG, "‚úÖ L·∫•y th√¥ng tin user th√†nh c√¥ng: " + fullName);
                        fetchUserEmail(userId, token, username, fullName);
                    } else {
                        showLoading(false);
                        Toast.makeText(LoginActivity.this, "T√™n ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá", Toast.LENGTH_SHORT).show();
                    }
                } else {
                    showLoading(false);
                    Toast.makeText(LoginActivity.this, "Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin ng∆∞·ªùi d√πng", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<Person> call, Throwable t) {
                Log.e(TAG, "‚ùå Fetch user details failure: " + t.getMessage());
                handleServerError();
            }
        });
    }

    private void fetchUserEmail(String userId, String token, String username, String fullName) {
        Call<User> getUserMailCall = apiService.getUserMail(userId);

        getUserMailCall.enqueue(new Callback<User>() {
            @Override
            public void onResponse(Call<User> call, Response<User> response) {
                if (response.isSuccessful() && response.body() != null) {
                    String email = response.body().getEmail();
                    if (email != null) {
                        Log.d(TAG, "‚úÖ L·∫•y email th√†nh c√¥ng: " + email);
                        fetchFacePath(userId, token, username, fullName, email);
                    } else {
                        showLoading(false);
                        Toast.makeText(LoginActivity.this, "Email kh√¥ng h·ª£p l·ªá", Toast.LENGTH_SHORT).show();
                    }
                } else {
                    showLoading(false);
                    Toast.makeText(LoginActivity.this, "Kh√¥ng l·∫•y ƒë∆∞·ª£c email ng∆∞·ªùi d√πng", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<User> call, Throwable t) {
                Log.e(TAG, "‚ùå Fetch email failure: " + t.getMessage());
                handleServerError();
            }
        });
    }

    private void fetchFacePath(String userId, String token, String username, String fullName, String email) {
        Call<Person> facePathCall = apiService.getPersonById(userId);
        facePathCall.enqueue(new Callback<Person>() {
            @Override
            public void onResponse(Call<Person> call, Response<Person> response) {
                if (response.isSuccessful() && response.body() != null) {
                    String facePath = response.body().getFacePath();
                    if (facePath != null) {
                        Log.d(TAG, "‚úÖ L·∫•y facePath th√†nh c√¥ng: " + facePath);
                        fetchUserImage(userId, token, username, fullName, email, facePath);
                    } else {
                        showLoading(false);
                        Toast.makeText(LoginActivity.this, "Kh√¥ng t√¨m th·∫•y ·∫£nh ng∆∞·ªùi d√πng", Toast.LENGTH_SHORT).show();
                    }
                } else {
                    showLoading(false);
                    Toast.makeText(LoginActivity.this, "L·ªói l·∫•y facePath", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<Person> call, Throwable t) {
                Log.e(TAG, "‚ùå Fetch facePath failure: " + t.getMessage());
                handleServerError();
            }
        });
    }

    private void fetchUserImage(String userId, String token, String username, String fullName, String email, String facePathCall) {
        Call<ResponseBody> imageCall = apiService.getImage(facePathCall);

        imageCall.enqueue(new Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                if (response.isSuccessful() && response.body() != null) {
                    try {
                        byte[] imageBytes = response.body().bytes();
                        Bitmap bitmap = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length);

                        Log.d(TAG, "‚úÖ L·∫•y ·∫£nh user th√†nh c√¥ng");
                        saveUserSession(userId, token, username, fullName, email, imageBytes);
                        logLoginHistory(userId);
                    } catch (IOException e) {
                        e.printStackTrace();
                        showLoading(false);
                        Toast.makeText(LoginActivity.this, "L·ªói x·ª≠ l√Ω h√¨nh ·∫£nh", Toast.LENGTH_SHORT).show();
                    }
                } else {
                    showLoading(false);
                    Log.e("API", "Image not found or error: " + response.code());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                showLoading(false);
                Log.e("API", "Request failed: " + t.getMessage());
            }
        });
    }

    private void saveUserSession(String userId, String token, String username, String fullName, String email, byte[] imageBytes) {
        sessionManager.saveUserSession(token, userId, username, fullName, email);
        sessionManager.saveImageToPrefs(imageBytes);
        Log.d(TAG, "‚úÖ Session ƒë√£ ƒë∆∞·ª£c l∆∞u cho userId: " + userId);
    }

    private void logLoginHistory(String userId) {
        LoginHistory loginHistory = new LoginHistory(userId, DeviceUtil.getIPAddress(true), DeviceUtil.getDeviceInfo(), "SUCCESS");

        Call<LoginHistory> loginHistoryCall = apiService.createLoginHistory(loginHistory);
        loginHistoryCall.enqueue(new Callback<LoginHistory>() {
            @Override
            public void onResponse(Call<LoginHistory> call, Response<LoginHistory> response) {
                if (response.isSuccessful()) {
                    Log.d(TAG, "‚úÖ Login history ƒë√£ ƒë∆∞·ª£c ghi");
                    navigateToMainScreen();
                } else {
                    showLoading(false);
                    Toast.makeText(LoginActivity.this, "L·ªói ghi nh·∫≠t k√Ω ƒëƒÉng nh·∫≠p", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<LoginHistory> call, Throwable t) {
                Log.e(TAG, "‚ùå Login history failure: " + t.getMessage());
                handleServerError();
            }
        });
    }

    private void navigateToMainScreen() {
        showLoading(false);
        Toast.makeText(LoginActivity.this, "ƒêƒÉng Nh·∫≠p Th√†nh C√¥ng", Toast.LENGTH_SHORT).show();

        FirebaseMessaging.getInstance().getToken().addOnCompleteListener(task -> {
            if (!task.isSuccessful()) {
                Log.w(TAG, "‚ö†Ô∏è Fetching FCM registration token failed", task.getException());
                // V·∫´n chuy·ªÉn m√†n h√¨nh d√π l·∫•y token th·∫•t b·∫°i
                proceedToMainActivity();
                return;
            }

            String token = task.getResult();
            Log.d(TAG, "üîî FCM Token: " + token);

            String userId = sessionManager.getUserId();

            // G·ª≠i token v·ªÅ server Spring Boot ƒë·ªÉ l∆∞u
            Call<FcmToken> fcmTokenCall = apiService.postCreateFcmToken(new FcmToken(token, userId));

            fcmTokenCall.enqueue(new Callback<FcmToken>() {
                @Override
                public void onResponse(Call<FcmToken> call, Response<FcmToken> response) {
                    if (response.isSuccessful()) {
                        Log.d(TAG, "‚úÖ FCM token ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng");
                    } else {
                        Log.w(TAG, "‚ö†Ô∏è FCM token g·ª≠i th·∫•t b·∫°i: " + response.code());
                    }
                    // Chuy·ªÉn m√†n h√¨nh b·∫•t k·ªÉ response c√≥ th√†nh c√¥ng hay kh√¥ng
                    proceedToMainActivity();
                }

                @Override
                public void onFailure(Call<FcmToken> call, Throwable t) {
                    // V·∫´n chuy·ªÉn m√†n h√¨nh d√π g·ª≠i FCM token th·∫•t b·∫°i
                    Log.e(TAG, "‚ùå Failed to send FCM token: " + t.getMessage());
                    proceedToMainActivity();
                }
            });
        });
    }

    private void proceedToMainActivity() {
        Log.d(TAG, "üéØ ƒêang chuy·ªÉn ƒë·∫øn MainActivity");

        // Chuy·ªÉn ƒë·∫øn m√†n h√¨nh ch√≠nh tr∆∞·ªõc
        Intent intent = new Intent(LoginActivity.this, FindLicensePlateActivity.class);
        startActivity(intent);

        // Ki·ªÉm tra v√† y√™u c·∫ßu quy·ªÅn location
        if (!hasLocationPermission()) {
            Log.w(TAG, "‚ö†Ô∏è Ch∆∞a c√≥ quy·ªÅn location, ƒëang y√™u c·∫ßu...");
            requestLocationPermission();
        } else {
            // C√≥ ƒë·ªß quy·ªÅn r·ªìi, kh·ªüi ƒë·ªông service ngay
            startLocationService();
        }

        finish(); // ƒê√≥ng LoginActivity
    }

    private void startLocationService() {
        Log.d(TAG, "üéØ ƒêang kh·ªüi ƒë·ªông LocationService");
        Intent serviceIntent = new Intent(this, LocationService.class);

        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                startForegroundService(serviceIntent);
                Log.d(TAG, "‚úÖ LocationService ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông b·∫±ng startForegroundService()");
            } else {
                startService(serviceIntent);
                Log.d(TAG, "‚úÖ LocationService ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông b·∫±ng startService()");
            }
        } catch (SecurityException e) {
            Log.e(TAG, "‚ùå SecurityException khi kh·ªüi ƒë·ªông LocationService: " + e.getMessage());
        } catch (Exception e) {
            Log.e(TAG, "‚ùå L·ªói khi kh·ªüi ƒë·ªông LocationService: " + e.getMessage());
        }
    }

    private void requestLocationPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            // Android 10 tr·ªü l√™n: c·∫ßn c·∫£ background location n·∫øu mu·ªën ch·∫°y khi app ·ªü background
            Log.d(TAG, "üìç Y√™u c·∫ßu quy·ªÅn location cho Android 10+");
            ActivityCompat.requestPermissions(this, new String[]{
                    Manifest.permission.ACCESS_FINE_LOCATION,
                    Manifest.permission.ACCESS_COARSE_LOCATION,
                    Manifest.permission.ACCESS_BACKGROUND_LOCATION
            }, REQUEST_LOCATION_PERMISSIONS);
        } else {
            Log.d(TAG, "üìç Y√™u c·∫ßu quy·ªÅn location cho Android < 10");
            ActivityCompat.requestPermissions(this, new String[]{
                    Manifest.permission.ACCESS_FINE_LOCATION,
                    Manifest.permission.ACCESS_COARSE_LOCATION
            }, REQUEST_LOCATION_PERMISSIONS);
        }
    }

    private boolean hasLocationPermission() {
        boolean fineLocation = ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED;
        boolean coarseLocation = ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED;
        boolean backgroundLocation = Build.VERSION.SDK_INT < Build.VERSION_CODES.Q ||
                ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_BACKGROUND_LOCATION) == PackageManager.PERMISSION_GRANTED;

        Log.d(TAG, "üìç Location permissions - Fine: " + (fineLocation ? "‚úÖ" : "‚ùå") +
                ", Coarse: " + (coarseLocation ? "‚úÖ" : "‚ùå") +
                ", Background: " + (backgroundLocation ? "‚úÖ" : "‚ùå"));

        return fineLocation && coarseLocation && backgroundLocation;
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        if (requestCode == REQUEST_LOCATION_PERMISSIONS) {
            boolean allGranted = true;
            for (int i = 0; i < permissions.length; i++) {
                boolean granted = grantResults[i] == PackageManager.PERMISSION_GRANTED;
                Log.d(TAG, "üìç Permission " + permissions[i] + ": " + (granted ? "‚úÖ Granted" : "‚ùå Denied"));
                if (!granted) {
                    allGranted = false;
                }
            }

            if (allGranted) {
                Log.d(TAG, "‚úÖ T·∫•t c·∫£ quy·ªÅn location ƒë√£ ƒë∆∞·ª£c c·∫•p, kh·ªüi ƒë·ªông LocationService");
                startLocationService();
            } else {
                Log.w(TAG, "‚ö†Ô∏è M·ªôt s·ªë quy·ªÅn location b·ªã t·ª´ ch·ªëi");
                showLocationPermissionDialog();
            }
        }
    }

    private void showLocationPermissionDialog() {
        new AlertDialog.Builder(this)
                .setTitle("C·∫•p quy·ªÅn v·ªã tr√≠")
                .setMessage("·ª®ng d·ª•ng c·∫ßn quy·ªÅn truy c·∫≠p v·ªã tr√≠ ƒë·ªÉ ho·∫°t ƒë·ªông ƒë√∫ng c√°ch. B·∫°n c√≥ mu·ªën c·∫•p quy·ªÅn kh√¥ng?")
                .setPositiveButton("Th·ª≠ l·∫°i", (dialog, which) -> requestLocationPermission())
                .setNegativeButton("B·ªè qua", (dialog, which) -> {
                    Log.w(TAG, "‚ö†Ô∏è User t·ª´ ch·ªëi c·∫•p quy·ªÅn location");
                    // V·∫´n c√≥ th·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng app nh∆∞ng kh√¥ng c√≥ location tracking
                })
                .show();
    }

    private void handleFailedLogin(int responseCode) {
        showLoading(false);
        Log.e(TAG, "‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: " + responseCode);
        Toast.makeText(LoginActivity.this, "T√™n ƒêƒÉng Nh·∫≠p Ho·∫∑c M·∫≠t Kh·∫©u Kh√¥ng ƒê√∫ng", Toast.LENGTH_SHORT).show();
    }

    private void handleServerError() {
        showLoading(false);
        Log.e(TAG, "‚ùå Server error occurred");
        Toast.makeText(LoginActivity.this, "Server ƒêang G·∫∑p L·ªói", Toast.LENGTH_SHORT).show();
    }

    private void showLoading(boolean isLoading) {
        if (isLoading) {
            progressBar.setVisibility(View.VISIBLE);
            btnLogin.setEnabled(false);
            btnLogin.setText("ƒêang ƒëƒÉng nh·∫≠p...");
            Log.d(TAG, "‚è≥ Hi·ªÉn th·ªã loading");
        } else {
            progressBar.setVisibility(View.GONE);
            btnLogin.setEnabled(true);
            btnLogin.setText("ƒêƒÉng nh·∫≠p");
            Log.d(TAG, "‚úÖ ·∫®n loading");
        }
    }
}